# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Polaris CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


defaults:
  run:
    working-directory: ./ts

jobs:
  # Builds all Polaris components
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    # Checkout and install dependencies.
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./ts/package-lock.json
    - run: npm ci

    # Build the Polaris components
    - run: npx nx build core
    - run: npx nx build common-mappings
    - run: npx nx build kubernetes
    - run: npx nx build prometheus
    - run: npx nx build cost-efficiency
    - run: npx nx build schema-gen
    - run: npx nx build polaris-nx
    - run: npx nx build polaris-cli
    - run: npx nx build elasticity-horizontal-elasticity-strategy-controller
    - run: npx nx build elasticity-vertical-elasticity-strategy-controller
    - run: npx nx build metrics-rest-api-cost-efficiency-controller
    - run: npx nx build slo-cost-efficiency-slo-controller
    - run: npx nx build slo-cpu-usage-slo-controller

  # Runs the tests for all Polaris components
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    # Checkout and install dependencies.
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./ts/package-lock.json
    - run: npm ci

    # Run the tests
    - run: npx nx run core:test
    - run: npx nx run common-mappings:test
    - run: npx nx run kubernetes:test
    - run: npx nx run prometheus:test
    - run: npx nx run cost-efficiency:test
    - run: npx nx run schema-gen:test
    - run: npx nx run polaris-nx:test
    - run: npx nx run polaris-cli:test
    - run: npx nx run elasticity-horizontal-elasticity-strategy-controller:test
    - run: npx nx run elasticity-vertical-elasticity-strategy-controller:test
    - run: npx nx run metrics-rest-api-cost-efficiency-controller:test
    - run: npx nx run slo-cost-efficiency-slo-controller:test
    - run: npx nx run slo-cpu-usage-slo-controller:test

    # Check if schema generation and SloMapping Serialization execute
    - run: npm run gen-crds
    - run: npm run serialize-slo-mappings

    # Ensure that we can build the typedoc
    - run: npm run docs:build

    # Ensure that we have no circular dependencies
    - run: npm run ts-circular-dep-check

  # Runs the E2E tests
  e2e:
     runs-on: ubuntu-latest
     strategy:
       matrix:
         node-version: [18.x]
     steps:
     # Checkout and install dependencies.
     - uses: actions/checkout@v3
     - name: Use Node.js ${{ matrix.node-version }}
       uses: actions/setup-node@v3
       with:
         node-version: ${{ matrix.node-version }}
         cache: 'npm'
         cache-dependency-path: ./ts/package-lock.json
     - run: npm ci

     # Build required components
     - run: npx nx build polaris-nx
     # E2E tests
     - run: npx nx run polaris-nx-e2e:e2e
